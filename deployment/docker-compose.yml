version: '3.3'
services:
  nginx:
    image: nginx:latest
    volumes:
      - /home/azureuser/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - "receiver"
      - "storage"
      - "processing"
      - "audit_log"
      - "dashboard"
    ports:
      - "80:80"
    networks:
      - "api.network"
  health:
    build:
      context: ../health
      dockerfile: Dockerfile
    image: health
    ports:
      - "8120"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/health:/config
      - /home/azureuser/logs:/logs
    networks:
      - "api.network"
  dashboard:
    build:
      context: ../dashboard-ui
      dockerfile: Dockerfile
    image: dashboard
    ports:
      - "3000"
    depends_on:
      - "processing"
      - "audit_log"
    networks:
      - "api.network"
  receiver:
    image: fishfinna/receiver:latest
    ports:
      - "8080"
    depends_on:
      - "kafka"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/receiver:/config
      - /home/azureuser/logs:/logs
    networks:
      - "api.network"
  storage:
    image: fishfinna/storage:latest
    ports:
      - "8090"
    depends_on:
      - "kafka"
      - "db"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/storage:/config
      - /home/azureuser/logs:/logs
    networks:
      - "api.network"
  processing:
    image: fishfinna/processing:latest
    ports:
      - "8100"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/processing:/config
      - /home/azureuser/logs:/logs
      - processing-db:/data
    networks:
      - "api.network"
  audit_log:
    image: fishfinna/audit_log:latest
    depends_on:
      - "kafka"
    ports:
      - "8110"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/audit_log:/config
      - /home/azureuser/logs:/logs
    networks:
      - "api.network"
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
    volumes:
      - /home/azureuser/zookeeper/data:/opt/zookeeper-3.4.13/data
      - /home/azureuser/logs:/logs
  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:2:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka-lab6.canadacentral.cloudapp.azure.com
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka-lab6.canadacentral.cloudapp.azure.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/azureuser/kafka:/kafka/kafka-logs
    depends_on:
      - "zookeeper"
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - my-db:/var/lib/mysql
volumes:
  my-db:
  processing-db:
networks:
  api.network: